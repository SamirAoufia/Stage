// 1. Installer les dépendances nécessaires (ex: influxdb node client)
// 2. Configurer la connexion à la base de données InfluxDB
import { InfluxDB } from '@influxdata/influxdb-client';
import { NextResponse } from 'next/server';

const influxdb = new InfluxDB({
  url: 'http://192.168.0.153:8086',
  token: 'Grm2Vpl_k9QB7kaoIpCMwib4KICZOnHuVyP88RgmNU-5zYVNuCwChNH5GbToM7yHFGzyH6MwngiQIO93GmijxQ==',
});

const queryApi = influxdb.getQueryApi('17980c3d8cf14b98');




export  async function GET() {
  // 4. Écrire les fonctions pour interagir avec InfluxDB
  // Par exemple, pour récupérer des données

  
  const fluxQuery = 'from(bucket: "PLAQUE_DE_CUISSON") |> range(start: -1h)  |> pivot(rowKey:["_time"], columnKey: ["_measurement"], valueColumn: "_value")';
  const data = await queryInfluxDB(fluxQuery);
  //const filteredData = filtreData(data);
  
  // 5. Gérer les requêtes et les réponses
  return NextResponse.json(data);
 // res.status(200).json(data);
}

async function queryInfluxDB(fluxQuery: string) {
  const result = await queryApi.collectRows(fluxQuery);
  return result;
}

// function filtreData(data: any) {
//   return data.map((item: any) => ({
//     _Temperature: (data.filter((item: any) => item._measurement === "Temperature")[0] as any)?._value,
//     _Humidity: (data.filter((item: any) => item._measurement === "Humidity")[0] as any)?._value,
//     _Power: (data.filter((item: any) => item._measurement === "Power")[0] as any)?._value,
//     _ThermocoupleTestoTemp: (data.filter((item: any) => item._measurement === "ThermocoupleTestoTemp")[0] as any)?._value,
//     _MlxTemp: (data.filter((item: any) => item._measurement === "MlxTemp")[0] as any)?._value,
//     _ThermocoupleTemp: (data.filter((item: any) => item._measurement === "ThermocoupleTemp")[0] as any)?._value,
//     _Ds18b20Temp: (data.filter((item: any) => item._measurement === "Ds18b20Temp")[0] as any)?._value,
//     _time: item._time,
//   }));
// }


//const temperature = (data.filter((item: any) => item._measurement === "Temperature")[0] as any)?._value;


// function filtreData(data: any) {
//   const filteredData: any = {
//     _Temperature: null,
//     _Humidity: null,
//     _Power: null,
//     _ThermocoupleTestoTemp: null,
//     _MlxTemp: null,
//     _ThermocoupleTemp: null,
//     _Ds18b20Temp: null,
//     _time: null,
//   };

//   for (const item of data) {
//     switch (item._measurement) {
//       case "Temperature":
//         filteredData._Temperature = item._value;
//         break;
//       case "Humidity":
//         filteredData._Humidity = item._value;
//         break;
//       case "Power":
//         filteredData._Power = item._value;
//         break;
//       case "ThermocoupleTestoTemp":
//         filteredData._ThermocoupleTestoTemp = item._value;
//         break;
//       case "MlxTemp":
//         filteredData._MlxTemp = item._value;
//         break;
//       case "ThermocoupleTemp":
//         filteredData._ThermocoupleTemp = item._value;
//         break;
//       case "Ds18b20Temp":
//         filteredData._Ds18b20Temp = item._value;
//         break;
//       default:
//         break;
//     }
//   }

//   filteredData._time = data[0]?._time;
//   return filteredData;
// }